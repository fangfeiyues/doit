<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 根据注解将需要管理的bean自动扫描到ioc中，将切面类也加上相应的注解 -->
    <context:component-scan base-package="com.fang.doit"></context:component-scan>

    <import resource="spring-mybatis.xml"/>

    <!-- 开启基于注解的aop功能 -->
    <aop:aspectj-autoproxy/>


    <!--<bean id="logAdvice" class="com.controller.spring.aop.advises.BeforeLogAdvise"></bean>-->


    <!--&lt;!&ndash;使用spring代理工厂定义一个代理，通过他访问业务类中的方法。在使用的时候我们都需要helloServiceProxy这个bean&ndash;&gt;-->
    <!--<bean id="helloServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <!--&lt;!&ndash;指定代理接口&ndash;&gt;-->
    <!--&lt;!&ndash;  <property name="proxyInterfaces">-->
    <!--<value>com.controller.spring.aop.service.HelloService</value>-->
    <!--</property> &ndash;&gt;-->
    <!--&lt;!&ndash;指定通知&ndash;&gt;-->
    <!--<property name="interceptorNames">-->
    <!--<list>-->
    <!--<value>logAdvice</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--&lt;!&ndash;指定目标对象&ndash;&gt;-->
    <!--<property name="target" ref="helloServiceImpl"></property>-->
    <!--</bean>-->

    <!--<bean class="com.controller.spring.ioc.extend.processor.test2.Apples" id="apples">-->
    <!--<property name="color" value="black"></property>-->
    <!--</bean>-->


    <!-- 1. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 2. 配置事务属性 -->
    <!--<tx:advice>元素声明事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 根据方法名指定事务的属性 -->
            <tx:method name="*"/>
            <!--propagation配置事务传播行为-->
            <tx:method name="purchase" propagation="REQUIRES_NEW"/>
            <!--isolation配置事务的隔离级别-->
            <tx:method name="update*" isolation="SERIALIZABLE"/>
            <!--rollback-for配置事务遇到异常必须回滚，no-rollback-for配置事务遇到异常必须不能回滚-->
            <tx:method name="add*" rollback-for="java.io.IOException"/>
            <!--                       no-rollback-for="com.dmsd.spring.tx.BookStockException"/>-->
            <!--read-only配置事务只读属性-->
            <tx:method name="find*" read-only="true"/>
            <!--timeout配置事务的超时属性-->
            <tx:method name="get*" timeout="3"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3. 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.fang.doit.spring.*.*(..))" id="txPointCut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

</beans>